{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\n//convention, first pragma then imports then error\nerror FundMe__NotOwner();\n\n// styling convention for error. Contract name two underscores, error name\n\n//styling convention\n// interfaces, libraries, contracts\n\n// NatSpec Format: special form of comments to provide\n// rich documentation for functions return variables and more\n// this speical form is named the Ethereum Natural Language Specification Format\n// it is inspired by doxygen\n\n// for natspec comments we need to start with three slashes or /**  */\n\n/**@title A contract for crowd funding\n * @notice This contract is to demo a sample funding contract\n * @dev This implements pricefeeds as our library\n */\n\n// this will be very helpful if we want to\n// generate documentation\n\ncontract FundMe {\n    // style: Type Declarations\n    using PriceConverter for uint256;\n\n    mapping(address => uint256) public addressToAmountFunded;\n    address[] public s_funders;\n\n    address public immutable i_owner;\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\n\n    AggregatorV3Interface public priceFeed;\n    modifier onlyOwner() {\n        // require(msg.sender == owner);\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\n        _;\n    }\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    // receive() external payable {\n    //     fund();\n    // }\n\n    // fallback() external payable {\n    //     fund();\n    // }\n\n    function fund() public payable {\n        require(\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n            \"You need to spend more ETH!\"\n        );\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \"You need to spend more ETH!\");\n        addressToAmountFunded[msg.sender] += msg.value;\n        s_funders.push(msg.sender);\n    }\n\n    function withdraw() public onlyOwner {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < s_funders.length;\n            funderIndex++\n        ) {\n            address funder = s_funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        s_funders = new address[](0);\n\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    function cheaperWithdraw() public payable onlyOwner{\n        //read the entire array and store it in memory instaed of reading at every interation of the for loop\n      address[] memory funders = s_funders;  \n      //mappings can't be in memory\n      for(uint256 funderIndex =0;funderIndex<funders.length; funderIndex++){\n        address funder = funders[funderIndex];\n        addressToAmountFunded[funder]=0;\n      }\n      s_funders = new address[](0);\n      (bool success, ) = i_owner.call{value:address(this).balance}(\"\");\n\n      require(success);\n    }\n}\n\n//\n// in storage, each slot is 32 bytes long and represents the bytes version of the object\n// uint256 25 is 0x00000...19 since that is the hex representation\n// for a true boolean it would be 0x0000..01 since that's its hex\n\n//for dynamic values\n// for example in arrays, only the length is stored in storage when we declare\n// an array\n// the elements are stored using a hashing function\n// for mapping there is an empty slot\n// constant and immutable do not take storage space as they are a part of the bytecode\n// they are like pointers\n\n// gas is calculated using opcodes\n// for example adding costs 3 gas, multiplying costs 5 gas\n// getting balance is 700\n//sstore stands for storage store\n//sload stands for storage load\n\n//convention to add s_ beofre the variable name\n// convention to add i_ before immutable\n// convention to name constant variables in uppercase\n\n//internal and private variables are cheaper than public variable "
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17 ;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\n// Why is this a library and not abstract?\r\n// Why not an interface?\r\nlibrary PriceConverter {\r\n    // We could make this public, but then we'd have to deploy it\r\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\r\n        // Goerli ETH / USD Address\r\n        // https://docs.chain.link/docs/ethereum-addresses/\r\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\r\n        // );\r\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\r\n        // ETH/USD rate in 18 digit\r\n        return uint256(answer * 10000000000);\r\n        // or (Both will do the same thing)\r\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\r\n    }\r\n\r\n    // 1000000000\r\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\r\n        // or (Both will do the same thing)\r\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\r\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\r\n        return ethAmountInUsd;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}