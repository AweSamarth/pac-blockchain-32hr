{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcfac783f466bec0a3b7a4925ccfb769f60fa4193245fe48b8f9674ecb7850de4",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "967572",
    "logsBloom": "0x
    "blockHash": "0xd5c4aec78a5f99b8dc3bc6f759908d50ad1d013cd756d651f087fb154a4fa78d",
    "transactionHash": "0xcfac783f466bec0a3b7a4925ccfb769f60fa4193245fe48b8f9674ecb7850de4",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "967572",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "93b16c2ff71589d444ccb504d4c3703c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This implements pricefeeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n//convention, first pragma then imports then error\\nerror FundMe__NotOwner();\\n\\n// styling convention for error. Contract name two underscores, error name\\n\\n//styling convention\\n// interfaces, libraries, contracts\\n\\n// NatSpec Format: special form of comments to provide\\n// rich documentation for functions return variables and more\\n// this speical form is named the Ethereum Natural Language Specification Format\\n// it is inspired by doxygen\\n\\n// for natspec comments we need to start with three slashes or /**  */\\n\\n/**@title A contract for crowd funding\\n * @notice This contract is to demo a sample funding contract\\n * @dev This implements pricefeeds as our library\\n */\\n\\n// this will be very helpful if we want to\\n// generate documentation\\n\\ncontract FundMe {\\n    // style: Type Declarations\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) public addressToAmountFunded;\\n    address[] public s_funders;\\n\\n    address public immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n\\n    AggregatorV3Interface public priceFeed;\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner{\\n        //read the entire array and store it in memory instaed of reading at every interation of the for loop\\n      address[] memory funders = s_funders;  \\n      //mappings can't be in memory\\n      for(uint256 funderIndex =0;funderIndex<funders.length; funderIndex++){\\n        address funder = funders[funderIndex];\\n        addressToAmountFunded[funder]=0;\\n      }\\n      s_funders = new address[](0);\\n      (bool success, ) = i_owner.call{value:address(this).balance}(\\\"\\\");\\n\\n      require(success);\\n    }\\n}\\n\\n//\\n// in storage, each slot is 32 bytes long and represents the bytes version of the object\\n// uint256 25 is 0x00000...19 since that is the hex representation\\n// for a true boolean it would be 0x0000..01 since that's its hex\\n\\n//for dynamic values\\n// for example in arrays, only the length is stored in storage when we declare\\n// an array\\n// the elements are stored using a hashing function\\n// for mapping there is an empty slot\\n// constant and immutable do not take storage space as they are a part of the bytecode\\n// they are like pointers\\n\\n// gas is calculated using opcodes\\n// for example adding costs 3 gas, multiplying costs 5 gas\\n// getting balance is 700\\n//sstore stands for storage store\\n//sload stands for storage load\\n\\n//convention to add s_ beofre the variable name\\n// convention to add i_ before immutable\\n// convention to name constant variables in uppercase\\n\\n//internal and private variables are cheaper than public variable \",\"keccak256\":\"0x5cc42f0ee8c982745d3fde7fe5951f814bcc7b38f973964bf61be83b077074c3\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17 ;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n// Why is this a library and not abstract?\\r\\n// Why not an interface?\\r\\nlibrary PriceConverter {\\r\\n    // We could make this public, but then we'd have to deploy it\\r\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\r\\n        // Goerli ETH / USD Address\\r\\n        // https://docs.chain.link/docs/ethereum-addresses/\\r\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\r\\n        // );\\r\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n        // ETH/USD rate in 18 digit\\r\\n        return uint256(answer * 10000000000);\\r\\n        // or (Both will do the same thing)\\r\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\r\\n    }\\r\\n\\r\\n    // 1000000000\\r\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\r\\n        // or (Both will do the same thing)\\r\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\r\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xf6a9543590f715fdd393bb74095c07eb527911f052ce55fe8c70c8454078b1ae\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620011a1380380620011a183398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b60805161102162000180600039600081816101a8015281816105ac015281816107a2015261083a01526110216000f3fe60806040526004361061007b5760003560e01c8063741bef1a1161004e578063741bef1a1461013c578063b60d428814610167578063be2693f014610171578063dba6335f1461017b5761007b565b80633ccfd60b146100805780633e47d6f31461009757806354861af7146100d45780636b69a59214610111575b600080fd5b34801561008c57600080fd5b506100956101a6565b005b3480156100a357600080fd5b506100be60048036038101906100b99190610a33565b6103e6565b6040516100cb9190610a79565b60405180910390f35b3480156100e057600080fd5b506100fb60048036038101906100f69190610ac0565b6103fe565b6040516101089190610afc565b60405180910390f35b34801561011d57600080fd5b5061012661043d565b6040516101339190610a79565b60405180910390f35b34801561014857600080fd5b5061015161044a565b60405161015e9190610b76565b60405180910390f35b61016f610470565b005b6101796105aa565b005b34801561018757600080fd5b50610190610838565b60405161019d9190610afc565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461022b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156102d65760006001828154811061025157610250610b91565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806102ce90610bef565b91505061022e565b50600067ffffffffffffffff8111156102f2576102f1610c37565b5b6040519080825280602002602001820160405280156103205781602001602082028036833780820191505090505b5060019080519060200190610336929190610929565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161035d90610c97565b60006040518083038185875af1925050503d806000811461039a576040519150601f19603f3d011682016040523d82523d6000602084013e61039f565b606091505b50509050806103e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103da90610d09565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6001818154811061040e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b18800006104af600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461085c90919063ffffffff16565b10156104f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e790610d75565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461053e9190610d95565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461062f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106b357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610669575b5050505050905060005b815181101561073d5760008282815181106106db576106da610b91565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061073590610bef565b9150506106bd565b50600067ffffffffffffffff81111561075957610758610c37565b5b6040519080825280602002602001820160405280156107875781602001602082028036833780820191505090505b506001908051906020019061079d929190610929565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107e490610c97565b60006040518083038185875af1925050503d8060008114610821576040519150601f19603f3d011682016040523d82523d6000602084013e610826565b606091505b505090508061083457600080fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061086883610898565b90506000670de0b6b3a764000085836108819190610dc9565b61088b9190610e3a565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156108e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090a9190610ef8565b5050509150506402540be400816109219190610f73565b915050919050565b8280548282559060005260206000209081019282156109a2579160200282015b828111156109a15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610949565b5b5090506109af91906109b3565b5090565b5b808211156109cc5760008160009055506001016109b4565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a00826109d5565b9050919050565b610a10816109f5565b8114610a1b57600080fd5b50565b600081359050610a2d81610a07565b92915050565b600060208284031215610a4957610a486109d0565b5b6000610a5784828501610a1e565b91505092915050565b6000819050919050565b610a7381610a60565b82525050565b6000602082019050610a8e6000830184610a6a565b92915050565b610a9d81610a60565b8114610aa857600080fd5b50565b600081359050610aba81610a94565b92915050565b600060208284031215610ad657610ad56109d0565b5b6000610ae484828501610aab565b91505092915050565b610af6816109f5565b82525050565b6000602082019050610b116000830184610aed565b92915050565b6000819050919050565b6000610b3c610b37610b32846109d5565b610b17565b6109d5565b9050919050565b6000610b4e82610b21565b9050919050565b6000610b6082610b43565b9050919050565b610b7081610b55565b82525050565b6000602082019050610b8b6000830184610b67565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bfa82610a60565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c2c57610c2b610bc0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610c81600083610c66565b9150610c8c82610c71565b600082019050919050565b6000610ca282610c74565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610cf3600b83610cac565b9150610cfe82610cbd565b602082019050919050565b60006020820190508181036000830152610d2281610ce6565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d5f601b83610cac565b9150610d6a82610d29565b602082019050919050565b60006020820190508181036000830152610d8e81610d52565b9050919050565b6000610da082610a60565b9150610dab83610a60565b9250828201905080821115610dc357610dc2610bc0565b5b92915050565b6000610dd482610a60565b9150610ddf83610a60565b9250828202610ded81610a60565b91508282048414831517610e0457610e03610bc0565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e4582610a60565b9150610e5083610a60565b925082610e6057610e5f610e0b565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e8a81610e6b565b8114610e9557600080fd5b50565b600081519050610ea781610e81565b92915050565b6000819050919050565b610ec081610ead565b8114610ecb57600080fd5b50565b600081519050610edd81610eb7565b92915050565b600081519050610ef281610a94565b92915050565b600080600080600060a08688031215610f1457610f136109d0565b5b6000610f2288828901610e98565b9550506020610f3388828901610ece565b9450506040610f4488828901610ee3565b9350506060610f5588828901610ee3565b9250506080610f6688828901610e98565b9150509295509295909350565b6000610f7e82610ead565b9150610f8983610ead565b9250828202610f9781610ead565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610fcf57610fce610bc0565b5b8282058414831517610fe457610fe3610bc0565b5b509291505056fea26469706673582212203d887c97ceb0eab32267e8e8cd663386e47c7b0e775d0f8429d8fefa1eb31c1264736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063741bef1a1161004e578063741bef1a1461013c578063b60d428814610167578063be2693f014610171578063dba6335f1461017b5761007b565b80633ccfd60b146100805780633e47d6f31461009757806354861af7146100d45780636b69a59214610111575b600080fd5b34801561008c57600080fd5b506100956101a6565b005b3480156100a357600080fd5b506100be60048036038101906100b99190610a33565b6103e6565b6040516100cb9190610a79565b60405180910390f35b3480156100e057600080fd5b506100fb60048036038101906100f69190610ac0565b6103fe565b6040516101089190610afc565b60405180910390f35b34801561011d57600080fd5b5061012661043d565b6040516101339190610a79565b60405180910390f35b34801561014857600080fd5b5061015161044a565b60405161015e9190610b76565b60405180910390f35b61016f610470565b005b6101796105aa565b005b34801561018757600080fd5b50610190610838565b60405161019d9190610afc565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461022b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156102d65760006001828154811061025157610250610b91565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806102ce90610bef565b91505061022e565b50600067ffffffffffffffff8111156102f2576102f1610c37565b5b6040519080825280602002602001820160405280156103205781602001602082028036833780820191505090505b5060019080519060200190610336929190610929565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161035d90610c97565b60006040518083038185875af1925050503d806000811461039a576040519150601f19603f3d011682016040523d82523d6000602084013e61039f565b606091505b50509050806103e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103da90610d09565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6001818154811061040e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b18800006104af600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461085c90919063ffffffff16565b10156104f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e790610d75565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461053e9190610d95565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461062f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106b357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610669575b5050505050905060005b815181101561073d5760008282815181106106db576106da610b91565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061073590610bef565b9150506106bd565b50600067ffffffffffffffff81111561075957610758610c37565b5b6040519080825280602002602001820160405280156107875781602001602082028036833780820191505090505b506001908051906020019061079d929190610929565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107e490610c97565b60006040518083038185875af1925050503d8060008114610821576040519150601f19603f3d011682016040523d82523d6000602084013e610826565b606091505b505090508061083457600080fd5b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061086883610898565b90506000670de0b6b3a764000085836108819190610dc9565b61088b9190610e3a565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156108e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090a9190610ef8565b5050509150506402540be400816109219190610f73565b915050919050565b8280548282559060005260206000209081019282156109a2579160200282015b828111156109a15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610949565b5b5090506109af91906109b3565b5090565b5b808211156109cc5760008160009055506001016109b4565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a00826109d5565b9050919050565b610a10816109f5565b8114610a1b57600080fd5b50565b600081359050610a2d81610a07565b92915050565b600060208284031215610a4957610a486109d0565b5b6000610a5784828501610a1e565b91505092915050565b6000819050919050565b610a7381610a60565b82525050565b6000602082019050610a8e6000830184610a6a565b92915050565b610a9d81610a60565b8114610aa857600080fd5b50565b600081359050610aba81610a94565b92915050565b600060208284031215610ad657610ad56109d0565b5b6000610ae484828501610aab565b91505092915050565b610af6816109f5565b82525050565b6000602082019050610b116000830184610aed565b92915050565b6000819050919050565b6000610b3c610b37610b32846109d5565b610b17565b6109d5565b9050919050565b6000610b4e82610b21565b9050919050565b6000610b6082610b43565b9050919050565b610b7081610b55565b82525050565b6000602082019050610b8b6000830184610b67565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bfa82610a60565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c2c57610c2b610bc0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610c81600083610c66565b9150610c8c82610c71565b600082019050919050565b6000610ca282610c74565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610cf3600b83610cac565b9150610cfe82610cbd565b602082019050919050565b60006020820190508181036000830152610d2281610ce6565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d5f601b83610cac565b9150610d6a82610d29565b602082019050919050565b60006020820190508181036000830152610d8e81610d52565b9050919050565b6000610da082610a60565b9150610dab83610a60565b9250828201905080821115610dc357610dc2610bc0565b5b92915050565b6000610dd482610a60565b9150610ddf83610a60565b9250828202610ded81610a60565b91508282048414831517610e0457610e03610bc0565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e4582610a60565b9150610e5083610a60565b925082610e6057610e5f610e0b565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e8a81610e6b565b8114610e9557600080fd5b50565b600081519050610ea781610e81565b92915050565b6000819050919050565b610ec081610ead565b8114610ecb57600080fd5b50565b600081519050610edd81610eb7565b92915050565b600081519050610ef281610a94565b92915050565b600080600080600060a08688031215610f1457610f136109d0565b5b6000610f2288828901610e98565b9550506020610f3388828901610ece565b9450506040610f4488828901610ee3565b9350506060610f5588828901610ee3565b9250506080610f6688828901610e98565b9150509295509295909350565b6000610f7e82610ead565b9150610f8983610ead565b9250828202610f9781610ead565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610fcf57610fce610bc0565b5b8282058414831517610fe457610fe3610bc0565b5b509291505056fea26469706673582212203d887c97ceb0eab32267e8e8cd663386e47c7b0e775d0f8429d8fefa1eb31c1264736f6c63430008110033",
  "devdoc": {
    "details": "This implements pricefeeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}